name: Test Lambda Container Deploy

on:
  push:
    branches: [develop]
    paths:
      - 'coinbase-aws/**'
  pull_request:
    branches: [develop]
    paths:
      - 'coinbase-aws/**'
  workflow_dispatch: # Allow manual trigger

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: coinbase-test-lambda
  LAMBDA_FUNCTION_NAME: coinbase-test-function

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Run basic tests
      run: |
        cd coinbase-aws
        python -c "import json; print('Basic test passed')"
    
    - name: Test Docker build
      run: |
        cd coinbase-aws
        docker build -t test-lambda .
        echo "Docker build successful"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' # Only deploy from develop branch
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Setup ECR Repository
      run: |
        echo "=== Setting up ECR Repository ==="
        
        # Create ECR repository if it doesn't exist
        if aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "✅ ECR repository ${{ env.ECR_REPOSITORY }} already exists"
        else
          echo "Creating ECR repository ${{ env.ECR_REPOSITORY }}..."
          aws ecr create-repository \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --region ${{ env.AWS_REGION }} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          echo "✅ Created ECR repository"
        fi
        
        # Set ECR repository policy to allow Lambda access
        echo "Setting up ECR repository policy for Lambda access..."
        if aws ecr set-repository-policy \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --region ${{ env.AWS_REGION }} \
          --policy-text '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "LambdaAccess",
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                },
                "Action": [
                  "ecr:BatchGetImage",
                  "ecr:GetDownloadUrlForLayer"
                ]
              }
            ]
          }' 2>/dev/null; then
          echo "✅ ECR repository policy configured"
        else
          echo "⚠️  Cannot set ECR repository policy - missing ecr:SetRepositoryPolicy permission"
          echo "You need to add this permission to the github-actions-hasha user:"
          echo "ecr:SetRepositoryPolicy"
          echo ""
          echo "Or manually set the repository policy using:"
          echo "aws ecr set-repository-policy --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --policy-text '{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"LambdaAccess\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":[\"ecr:BatchGetImage\",\"ecr:GetDownloadUrlForLayer\"]}]}'"
          echo ""
          echo "Continuing with deployment - Lambda may fail if repository policy is not set..."
        fi

    - name: Build and push Docker image
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "=== Building and Pushing Docker Image ==="
        cd coinbase-aws
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "✅ Docker image built and pushed successfully"

    - name: Setup IAM Role and Permissions
      run: |
        echo "=== Checking IAM Role ==="
        
        # Check if IAM role exists
        if aws iam get-role --role-name lambda-execution-role-fintracker-v2 2>/dev/null; then
          echo "✅ IAM role lambda-execution-role-fintracker-v2 exists"
        else
          echo "❌ IAM role lambda-execution-role-fintracker-v2 does not exist"
          echo "Please create the role manually with the required permissions"
          exit 1
        fi

    - name: Deploy Lambda Function
      run: |
        echo "=== Deploying Lambda Function ==="
        
        # Check if function exists
        if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "Updating existing Lambda function..."
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.build.outputs.image_uri }} \
            --region ${{ env.AWS_REGION }}
          echo "✅ Updated existing Lambda function"
        else
          echo "Creating new Lambda function..."
          aws lambda create-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --package-type Image \
            --code ImageUri=${{ steps.build.outputs.image_uri }} \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role-fintracker-v2 \
            --timeout 30 \
            --memory-size 512 \
            --environment Variables='{ENVIRONMENT=develop}' \
            --region ${{ env.AWS_REGION }}
          echo "✅ Created new Lambda function"
        fi

    - name: Test Lambda Function
      run: |
        echo "=== Testing Lambda Function ==="
        
        # Wait for function to be ready
        echo "Waiting for function to be ready..."
        sleep 15
        
        # Test the function
        echo "Invoking Lambda function..."
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload ' { "test": "data" } ' \
          --region ${{ env.AWS_REGION }} \
          response.json
        
        # Display response
        echo "Lambda function response:"
        cat response.json
        
        # Check if the function executed successfully
        if grep -q '"statusCode": 200' response.json; then
          echo "✅ Lambda function test completed successfully"
        else
          echo "❌ Lambda function test failed"
          exit 1
        fi 